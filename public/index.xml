<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rahul Mishra</title>
    <link>//localhost:1313/</link>
    <description>Recent content on Rahul Mishra</description>
    <generator>Hugo -- 0.131.0</generator>
    <language>en</language>
    <lastBuildDate>Sat, 10 May 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Analysing Brbbot</title>
      <link>//localhost:1313/blogs/brbbot-analysis/</link>
      <pubDate>Sat, 10 May 2025 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blogs/brbbot-analysis/</guid>
      <description>In the previous article we unpacked the sample using various methods. In this post we will do static and dynamic analysis on the given sample.
‍
Static analysis
The sample communicates over the internet, possibly to a C2 server, using DNS resolution, HTTP GET/POST, and low-level sockets. It builds and sends HTTP requests, reads headers, and handles responses.
‍
The malware uses encryption to protect its data or payload, likely for obfuscation or C2 encryption.</description>
    </item>
    <item>
      <title>Unpacking Malware</title>
      <link>//localhost:1313/blogs/unpacking-malware/</link>
      <pubDate>Sat, 10 May 2025 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/blogs/unpacking-malware/</guid>
      <description>Malware Packing
Packing is like wrapping a program in layers to hide its contents. Malware authors use packers to compress or encrypt the original program and add a small unpacking stub. The stub is a tiny piece of code that runs first. When the packed file is executed, the stub decompresses (or decrypts) the real malicious code into memory and then hands control to it (courses.cs.umbc.edu ,redscan.com). This means on disk you only see a wrapper, not the actual malware.</description>
    </item>
  </channel>
</rss>
